// @generated by Cursor AI (Claude) — verified by Kevin Mendy
import { createContext, useContext, useState, useEffect, useCallback } from 'react';
import { useTranslation } from 'react-i18next';

/**
 * Context pour la gestion globale de la langue (FR / Wolof)
 * 
 * Rôle :
 * - Stocke la langue actuelle ('fr' ou 'wo')
 * - Se connecte à i18next pour synchroniser les traductions
 * - Permet de changer la langue (pour citoyens)
 * - Permet de forcer la langue (pour login, agents, admins)
 * 
 * Usage :
 * 1. Wrapper l'app avec <LangProvider>
 * 2. Utiliser le hook useLanguage() dans n'importe quel composant
 * 
 * Exemple :
 * const { language, changeLanguage } = useLanguage();
 */

// Création du Context
const LangContext = createContext(null);

/**
 * Provider du Context de langue
 * 
 * @param {Object} props
 * @param {ReactNode} props.children - Composants enfants
 */
export function LangProvider({ children }) {
  // ═══════════════════════════════════════════════════════════
  // HOOKS & ÉTAT
  // ═══════════════════════════════════════════════════════════
  
  // Hook i18next pour accéder aux fonctions de traduction
  const { i18n } = useTranslation();
  
  /**
   * Langue actuelle
   * Synchronisée avec i18next
   */
  const [language, setLanguage] = useState(i18n.language || 'fr');

  // ═══════════════════════════════════════════════════════════
  // FONCTIONS DE GESTION DE LA LANGUE
  // ═══════════════════════════════════════════════════════════

  /**
   * Change la langue et la sauvegarde dans localStorage
   * 
   * Utilisé par : Citoyens (via LanguageSwitcher)
   * 
   * Process :
   * 1. Appelle i18n.changeLanguage() pour changer les traductions
   * 2. i18next sauvegarde automatiquement dans localStorage
   * 3. Met à jour l'état React
   * 
   * @param {string} lang - Code langue ('fr' | 'wo')
   * 
   * Exemple :
   * changeLanguage('wo'); // Passe en Wolof
   * changeLanguage('fr'); // Passe en Français
   * 
   * Note : Utilise useCallback pour éviter les re-renders inutiles
   */
  const changeLanguage = useCallback(async (lang) => {
    try {
      // Vérifier que la langue est supportée
      if (!['fr', 'wo'].includes(lang)) {
        console.warn(`Langue non supportée: ${lang}. Utilisation de 'fr' par défaut.`);
        lang = 'fr';
      }

      // Changer la langue dans i18next (+ sauvegarde localStorage)
      await i18n.changeLanguage(lang);
      
      // Mettre à jour l'état React
      setLanguage(lang);
      
      console.log(`✅ Langue changée: ${lang}`);
    } catch (error) {
      console.error('Erreur changement langue:', error);
    }
  }, [i18n]);

  /**
   * Force la langue temporairement (SANS sauvegarde localStorage)
   * 
   * Utilisé par : Login, Agent Dashboard, Admin Dashboard
   * 
   * Process :
   * 1. Change la langue dans i18next SANS sauvegarde
   * 2. Met à jour l'état React
   * 3. Quand le user revient sur une page publique, sa langue sauvegardée est restaurée
   * 
   * @param {string} lang - Code langue ('fr' | 'wo')
   * 
   * Exemple :
   * forceLanguage('fr'); // Force le français (temporaire)
   * 
   * Note : Utilise useCallback pour éviter les re-renders inutiles
   */
  const forceLanguage = useCallback(async (lang) => {
    try {
      // Vérifier que la langue est supportée
      if (!['fr', 'wo'].includes(lang)) {
        console.warn(`Langue non supportée: ${lang}. Utilisation de 'fr' par défaut.`);
        lang = 'fr';
      }

      // Changer la langue dans i18next SANS modifier localStorage
      // (on ne veut pas écraser le choix du citoyen)
      await i18n.changeLanguage(lang);
      
      // Mettre à jour l'état React
      setLanguage(lang);
      
      console.log(`🔒 Langue forcée (temporaire): ${lang}`);
    } catch (error) {
      console.error('Erreur forçage langue:', error);
    }
  }, [i18n]);

  /**
   * Restaure la langue sauvegardée du user
   * 
   * Utilisé quand on revient sur une page publique après être passé
   * par une page avec langue forcée (ex: login → home)
   * 
   * Process :
   * 1. Récupère la langue sauvegardée dans localStorage
   * 2. Change i18next vers cette langue
   * 3. Met à jour l'état React
   * 
   * Note : Utilise useCallback pour éviter les re-renders inutiles
   * (critique pour éviter les boucles infinies dans PublicLayout)
   */
  const restoreLanguage = useCallback(async () => {
    try {
      // Récupérer la langue sauvegardée (clé définie dans i18n.js)
      const savedLang = localStorage.getItem('wattu_language') || 'fr';
      
      // Restaurer la langue sauvegardée
      await i18n.changeLanguage(savedLang);
      setLanguage(savedLang);
      
      console.log(`🔄 Langue restaurée: ${savedLang}`);
    } catch (error) {
      console.error('Erreur restauration langue:', error);
    }
  }, [i18n]);

  // ═══════════════════════════════════════════════════════════
  // EFFETS (useEffect)
  // ═══════════════════════════════════════════════════════════

  /**
   * Effet : Synchroniser l'état React quand i18next change
   * 
   * i18next peut changer de langue via :
   * - Détection automatique au chargement
   * - Changement depuis un autre composant
   * - Restauration depuis localStorage
   * 
   * On écoute ces changements pour garder React synchronisé
   */
  useEffect(() => {
    const handleLanguageChanged = (lng) => {
      console.log(`🌍 i18next language changed: ${lng}`);
      setLanguage(lng);
    };

    // Écouter les changements de langue i18next
    i18n.on('languageChanged', handleLanguageChanged);

    // Initialiser avec la langue actuelle de i18next
    setLanguage(i18n.language);

    // Cleanup : Arrêter d'écouter quand le composant est démonté
    return () => {
      i18n.off('languageChanged', handleLanguageChanged);
    };
  }, [i18n]);

  // ═══════════════════════════════════════════════════════════
  // VALEURS DU CONTEXT (accessibles via useLanguage())
  // ═══════════════════════════════════════════════════════════

  const value = {
    // État
    language,                           // 'fr' | 'wo'
    availableLanguages: ['fr', 'wo'],   // Langues disponibles
    
    // Fonctions
    changeLanguage,                     // Changer langue (avec sauvegarde)
    forceLanguage,                      // Forcer langue (temporaire)
    restoreLanguage,                    // Restaurer langue sauvegardée
    
    // Helpers
    isFrench: language === 'fr',        // true si français
    isWolof: language === 'wo',         // true si Wolof
    languageLabel: language === 'fr' ? 'Français' : 'Wolof', // Label pour affichage
  };

  // ═══════════════════════════════════════════════════════════
  // RENDER
  // ═══════════════════════════════════════════════════════════

  return (
    <LangContext.Provider value={value}>
      {children}
    </LangContext.Provider>
  );
}

/**
 * Hook personnalisé pour accéder au Context de langue
 * 
 * Usage :
 * const { language, changeLanguage, forceLanguage } = useLanguage();
 * 
 * @returns {Object} Valeurs et fonctions du context
 * @throws {Error} Si utilisé hors d'un LangProvider
 * 
 * Exemple :
 * function MyComponent() {
 *   const { language, changeLanguage } = useLanguage();
 *   
 *   return (
 *     <button onClick={() => changeLanguage('wo')}>
 *       {language === 'fr' ? 'Passer en Wolof' : 'Passer en Français'}
 *     </button>
 *   );
 * }
 */
export function useLanguage() {
  const context = useContext(LangContext);

  if (context === null) {
    throw new Error('useLanguage doit être utilisé à l\'intérieur d\'un LangProvider');
  }

  return context;
}

export default LangContext;

