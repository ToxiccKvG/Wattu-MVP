// @generated by Cursor AI (Claude) ‚Äî verified by Kevin Mendy
import { useState, useCallback } from 'react';

/**
 * Hook personnalis√© pour g√©rer l'√©tat des filtres de signalements
 * 
 * Fonctionnalit√©s :
 * - √âtat centralis√© pour tous les filtres
 * - M√©thodes pour modifier un filtre
 * - M√©thode pour r√©initialiser tous les filtres
 * - Compteur de filtres actifs
 * 
 * @returns {{
 *   filters: Object,
 *   setFilter: Function,
 *   resetFilters: Function,
 *   activeFiltersCount: number
 * }}
 * 
 * @example
 * function ReportList() {
 *   const { filters, setFilter, resetFilters, activeFiltersCount } = useReportFilters();
 * 
 *   return (
 *     <div>
 *       <select onChange={(e) => setFilter('status', e.target.value)}>
 *         <option value="">Tous les statuts</option>
 *         <option value="pending">En attente</option>
 *       </select>
 * 
 *       {activeFiltersCount > 0 && (
 *         <button onClick={resetFilters}>
 *           R√©initialiser ({activeFiltersCount} filtres actifs)
 *         </button>
 *       )}
 *     </div>
 *   );
 * }
 */
export function useReportFilters() {
  /**
   * √âtat initial des filtres
   */
  const initialFilters = {
    type: '',           // Type de signalement (voirie, √©clairage, etc.)
    status: '',         // Statut (pending, in_progress, resolved, rejected)
    priority: '',       // Priorit√© (low, normal, high, urgent)
    dateFrom: null,     // Date de d√©but (format ISO ou Date)
    dateTo: null,       // Date de fin (format ISO ou Date)
    commune: '',        // Commune (UUID) - utile pour admin
    search: ''          // Recherche textuelle (description, citoyen)
  };

  const [filters, setFilters] = useState(initialFilters);

  /**
   * Mettre √† jour un filtre sp√©cifique
   * 
   * @param {string} key - Cl√© du filtre √† modifier
   * @param {any} value - Nouvelle valeur du filtre
   * 
   * @example
   * setFilter('status', 'pending');
   * setFilter('dateFrom', '2025-01-01');
   */
  const setFilter = useCallback((key, value) => {
    setFilters(prev => ({
      ...prev,
      [key]: value
    }));
  }, []);

  /**
   * R√©initialiser tous les filtres √† leur √©tat initial
   */
  const resetFilters = useCallback(() => {
    setFilters(initialFilters);
    console.log('üîÑ Filtres r√©initialis√©s');
  }, []);

  /**
   * Compter le nombre de filtres actifs (non vides)
   */
  const activeFiltersCount = Object.values(filters).filter(value => {
    if (value === null || value === undefined || value === '') {
      return false;
    }
    return true;
  }).length;

  /**
   * Obtenir les filtres actifs uniquement (pour passer √† l'API)
   * 
   * @returns {Object} - Filtres actifs uniquement
   * 
   * @example
   * const activeFilters = getActiveFilters();
   * // { status: 'pending', priority: 'urgent' }
   * // (n'inclut pas les filtres vides)
   */
  const getActiveFilters = useCallback(() => {
    return Object.entries(filters).reduce((acc, [key, value]) => {
      if (value !== null && value !== undefined && value !== '') {
        acc[key] = value;
      }
      return acc;
    }, {});
  }, [filters]);

  return {
    filters,
    setFilter,
    resetFilters,
    activeFiltersCount,
    getActiveFilters
  };
}

export default useReportFilters;

