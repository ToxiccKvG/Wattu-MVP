// @generated by Cursor AI (Claude) ‚Äî verified by Kevin Mendy
import { useState, useEffect, useCallback } from 'react';
import * as reportService from '@/services/reportService';

/**
 * Hook personnalis√© pour r√©cup√©rer les statistiques des signalements d'un agent
 * 
 * Fonctionnalit√©s :
 * - Calcule les stats pour la commune de l'agent
 * - Stats par statut (pending, in_progress, resolved, rejected)
 * - Stats par type (voirie, √©clairage, etc.)
 * - Stats par priorit√© (low, normal, high, urgent)
 * - Auto-refresh
 * 
 * @param {string} communeId - UUID de la commune de l'agent
 * 
 * @returns {{
 *   stats: Object|null,
 *   loading: boolean,
 *   error: string|null,
 *   refetch: Function
 * }}
 * 
 * @example
 * function AgentDashboard() {
 *   const { user } = useAuth();
 *   const { stats, loading, error } = useAgentStats(user.commune_id);
 * 
 *   if (loading) return <Spinner />;
 *   if (error) return <Error message={error} />;
 * 
 *   return (
 *     <div>
 *       <StatCard title="En attente" value={stats.pending} />
 *       <StatCard title="En cours" value={stats.in_progress} />
 *       <StatCard title="R√©solus" value={stats.resolved} />
 *       <StatCard title="Rejet√©s" value={stats.rejected} />
 *     </div>
 *   );
 * }
 */
export function useAgentStats(communeId) {
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  /**
   * R√©cup√©rer les statistiques de la commune
   */
  const fetchStats = useCallback(async () => {
    if (!communeId) {
      setError('ID de commune requis');
      setLoading(false);
      return;
    }

    try {
      setLoading(true);
      setError(null);

      console.log(`üìä R√©cup√©ration des statistiques pour la commune: ${communeId}`);

      const { stats: data, error: fetchError } = await reportService.getAgentStatistics(communeId);

      if (fetchError) {
        setError(fetchError.message || 'Erreur lors du calcul des statistiques');
        setStats(null);
      } else {
        setStats(data);
        setError(null);
        console.log('‚úÖ Statistiques r√©cup√©r√©es:', data);
      }

    } catch (err) {
      console.error('‚ùå Erreur useAgentStats:', err);
      setError(err.message || 'Une erreur est survenue');
      setStats(null);
    } finally {
      setLoading(false);
    }
  }, [communeId]);

  /**
   * Charger les statistiques au montage du composant
   */
  useEffect(() => {
    fetchStats();
  }, [fetchStats]);

  /**
   * Structure de retour des stats :
   * {
   *   total: 68,
   *   pending: 12,
   *   in_progress: 8,
   *   resolved: 45,
   *   rejected: 3,
   *   by_type: { voirie: 20, eclairage: 15, ... },
   *   by_priority: { urgent: 2, high: 10, normal: 50, low: 6 }
   * }
   */
  return {
    stats,
    loading,
    error,
    refetch: fetchStats
  };
}

export default useAgentStats;

