// @generated by Cursor AI (Claude) ‚Äî verified by Kevin Mendy
import { useState, useEffect, useCallback } from 'react';
import * as reportService from '@/services/reportService';
import * as reportApi from '@/api/reportApi';

/**
 * Hook personnalis√© pour g√©rer les signalements d'un agent
 * 
 * Fonctionnalit√©s :
 * - R√©cup√©rer les signalements de la commune de l'agent (via RLS)
 * - Appliquer des filtres (status, type, priority)
 * - Mettre √† jour le statut d'un signalement
 * - Mettre √† jour la priorit√© d'un signalement
 * - Rafra√Æchir la liste
 * 
 * @param {string} communeId - UUID de la commune de l'agent
 * @param {Object} [filters={}] - Filtres optionnels
 * @param {string} [filters.status] - Filtrer par statut
 * @param {string} [filters.type] - Filtrer par type
 * @param {string} [filters.priority] - Filtrer par priorit√©
 * 
 * @returns {{
 *   reports: Array,
 *   loading: boolean,
 *   error: string|null,
 *   updateStatus: Function,
 *   updatePriority: Function,
 *   refetch: Function
 * }}
 * 
 * @example
 * function ReportList() {
 *   const { user } = useAuth();
 *   const { reports, loading, updateStatus } = useAgentReports(user.commune_id);
 * 
 *   return (
 *     <div>
 *       {reports.map(report => (
 *         <div key={report.id}>
 *           <h3>{report.type}</h3>
 *           <button onClick={() => updateStatus(report.id, 'in_progress')}>
 *             Prendre en charge
 *           </button>
 *         </div>
 *       ))}
 *     </div>
 *   );
 * }
 */
export function useAgentReports(communeId, filters = {}) {
  const [reports, setReports] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  /**
   * R√©cup√©rer les signalements de la commune avec filtres
   */
  const fetchReports = useCallback(async () => {
    if (!communeId) {
      setError('ID de commune requis');
      setLoading(false);
      return;
    }

    try {
      setLoading(true);
      setError(null);

      // Options de requ√™te
      const options = {
        commune_id: communeId,
        limit: 100,
        orderBy: 'created_at',
        ascending: false // Plus r√©cents en premier
      };

      // Appliquer les filtres
      if (filters.status) {
        options.status = filters.status;
      }
      if (filters.type) {
        options.type = filters.type;
      }
      if (filters.priority) {
        options.priority = filters.priority;
      }

      const { data, error: fetchError } = await reportService.getAllReports(options);

      if (fetchError) {
        setError(fetchError.message || 'Erreur lors de la r√©cup√©ration des signalements');
        setReports([]);
      } else {
        setReports(data || []);
        setError(null);
      }

    } catch (err) {
      console.error('‚ùå Erreur useAgentReports:', err);
      setError(err.message || 'Une erreur est survenue');
      setReports([]);
    } finally {
      setLoading(false);
    }
  }, [communeId, filters.status, filters.type, filters.priority]);

  /**
   * Mettre √† jour le statut d'un signalement
   * 
   * @param {string} reportId - UUID du signalement
   * @param {string} newStatus - Nouveau statut (pending, in_progress, resolved, rejected)
   * @returns {Promise<{success: boolean, error: Object|null}>}
   */
  const updateStatus = useCallback(async (reportId, newStatus) => {
    try {
      console.log(`üîÑ Mise √† jour du statut: ${reportId} ‚Üí ${newStatus}`);

      const { data, error: updateError } = await reportApi.updateReportStatus(reportId, newStatus);

      if (updateError) {
        console.error('‚ùå Erreur mise √† jour statut:', updateError);
        return { success: false, error: updateError };
      }

      console.log('‚úÖ Statut mis √† jour avec succ√®s');

      // Rafra√Æchir la liste des signalements
      await fetchReports();

      return { success: true, error: null };

    } catch (err) {
      console.error('‚ùå Erreur updateStatus:', err);
      return {
        success: false,
        error: {
          message: err.message || 'Erreur lors de la mise √† jour du statut',
          code: 'UPDATE_ERROR'
        }
      };
    }
  }, [fetchReports]);

  /**
   * Mettre √† jour la priorit√© d'un signalement
   * 
   * @param {string} reportId - UUID du signalement
   * @param {string} newPriority - Nouvelle priorit√© (low, normal, high, urgent)
   * @returns {Promise<{success: boolean, error: Object|null}>}
   */
  const updatePriority = useCallback(async (reportId, newPriority) => {
    try {
      console.log(`‚ö° Mise √† jour de la priorit√©: ${reportId} ‚Üí ${newPriority}`);

      const { data, error: updateError } = await reportApi.updateReportPriority(reportId, newPriority);

      if (updateError) {
        console.error('‚ùå Erreur mise √† jour priorit√©:', updateError);
        return { success: false, error: updateError };
      }

      console.log('‚úÖ Priorit√© mise √† jour avec succ√®s');

      // Rafra√Æchir la liste des signalements
      await fetchReports();

      return { success: true, error: null };

    } catch (err) {
      console.error('‚ùå Erreur updatePriority:', err);
      return {
        success: false,
        error: {
          message: err.message || 'Erreur lors de la mise √† jour de la priorit√©',
          code: 'UPDATE_ERROR'
        }
      };
    }
  }, [fetchReports]);

  /**
   * Charger les signalements au montage du composant et quand les filtres changent
   */
  useEffect(() => {
    fetchReports();
  }, [fetchReports]);

  return {
    reports,
    loading,
    error,
    updateStatus,
    updatePriority,
    refetch: fetchReports
  };
}

export default useAgentReports;

