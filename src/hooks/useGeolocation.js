
import { useState, useEffect, useCallback } from 'react';

/**
 * Custom Hook pour la g√©olocalisation GPS
 * 
 * Fonctionnalit√©s :
 * - R√©cup√©rer la position GPS actuelle
 * - G√©rer les permissions (granted, denied, prompt)
 * - G√©rer les erreurs (permission refus√©e, timeout, GPS indisponible)
 * - √âtats de chargement
 * 
 * @returns {Object} √âtat de g√©olocalisation
 * @property {Object|null} position - Position GPS {latitude, longitude, accuracy}
 * @property {boolean} loading - √âtat de chargement
 * @property {Object|null} error - Erreur √©ventuelle
 * @property {function} getCurrentPosition - Fonction pour r√©cup√©rer la position
 * @property {function} clearPosition - Fonction pour r√©initialiser la position
 * @property {boolean} isSupported - true si la g√©olocalisation est support√©e
 * 
 * @example
 * const { position, loading, error, getCurrentPosition } = useGeolocation();
 * 
 * // R√©cup√©rer la position au clic
 * <button onClick={getCurrentPosition}>
 *   {loading ? 'Chargement...' : 'Obtenir ma position'}
 * </button>
 * 
 * {error && <p>{error.message}</p>}
 * {position && <p>Lat: {position.latitude}, Lon: {position.longitude}</p>}
 */
export function useGeolocation() {
  const [position, setPosition] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isSupported, setIsSupported] = useState(false);

  // V√©rifier si la g√©olocalisation est support√©e
  useEffect(() => {
    if ('geolocation' in navigator) {
      setIsSupported(true);
    } else {
      setIsSupported(false);
      setError({
        code: 'NOT_SUPPORTED',
        message: 'La g√©olocalisation n\'est pas support√©e par ce navigateur'
      });
    }
  }, []);

  /**
   * R√©cup√©rer la position GPS actuelle
   * 
   * @param {Object} [options] - Options de g√©olocalisation
   * @param {boolean} [options.enableHighAccuracy=true] - Haute pr√©cision
   * @param {number} [options.timeout=10000] - Timeout en ms (default: 10s)
   * @param {number} [options.maximumAge=0] - √Çge maximum de la position en cache
   * 
   * @returns {Promise<{latitude: number, longitude: number, accuracy: number}>}
   */
  const getCurrentPosition = useCallback((options = {}) => {
    return new Promise((resolve, reject) => {
      if (!isSupported) {
        const notSupportedError = {
          code: 'NOT_SUPPORTED',
          message: 'La g√©olocalisation n\'est pas support√©e'
        };
        setError(notSupportedError);
        reject(notSupportedError);
        return;
      }

      setLoading(true);
      setError(null);

      const defaultOptions = {
        enableHighAccuracy: true,  // Haute pr√©cision (utilise GPS si disponible)
        timeout: 10000,             // Timeout de 10 secondes
        maximumAge: 0               // Ne pas utiliser une position en cache
      };

      const geoOptions = { ...defaultOptions, ...options };

      console.log('üìç Demande de g√©olocalisation en cours...');

      navigator.geolocation.getCurrentPosition(
        // Success callback
        (geoPosition) => {
          const pos = {
            latitude: geoPosition.coords.latitude,
            longitude: geoPosition.coords.longitude,
            accuracy: geoPosition.coords.accuracy
          };

          console.log(`‚úÖ Position obtenue: Lat ${pos.latitude}, Lon ${pos.longitude} (Pr√©cision: ${pos.accuracy}m)`);

          setPosition(pos);
          setLoading(false);
          setError(null);
          resolve(pos);
        },

        // Error callback
        (geoError) => {
          let errorMessage = 'Erreur de g√©olocalisation';
          let errorCode = 'UNKNOWN_ERROR';

          switch (geoError.code) {
            case geoError.PERMISSION_DENIED:
              errorMessage = 'Permission de g√©olocalisation refus√©e. Veuillez autoriser l\'acc√®s √† votre position dans les param√®tres de votre navigateur.';
              errorCode = 'PERMISSION_DENIED';
              break;

            case geoError.POSITION_UNAVAILABLE:
              errorMessage = 'Position GPS indisponible. V√©rifiez que le GPS est activ√©.';
              errorCode = 'POSITION_UNAVAILABLE';
              break;

            case geoError.TIMEOUT:
              errorMessage = 'D√©lai d\'attente d√©pass√©. Veuillez r√©essayer.';
              errorCode = 'TIMEOUT';
              break;

            default:
              errorMessage = 'Une erreur est survenue lors de la g√©olocalisation';
              errorCode = 'UNKNOWN_ERROR';
          }

          console.error('‚ùå Erreur g√©olocalisation:', errorCode, errorMessage);

          const error = {
            code: errorCode,
            message: errorMessage,
            originalError: geoError
          };

          setError(error);
          setLoading(false);
          setPosition(null);
          reject(error);
        },

        // Options
        geoOptions
      );
    });
  }, [isSupported]);

  /**
   * R√©initialiser la position et l'erreur
   */
  const clearPosition = useCallback(() => {
    setPosition(null);
    setError(null);
    setLoading(false);
    console.log('üîÑ Position r√©initialis√©e');
  }, []);

  /**
   * V√©rifier les permissions de g√©olocalisation
   * 
   * @returns {Promise<string>} 'granted', 'denied', ou 'prompt'
   */
  const checkPermission = useCallback(async () => {
    if (!navigator.permissions) {
      // API Permissions non support√©e (Safari iOS par exemple)
      return 'prompt';
    }

    try {
      const result = await navigator.permissions.query({ name: 'geolocation' });
      console.log('üîê Permission g√©olocalisation:', result.state);
      return result.state; // 'granted', 'denied', ou 'prompt'
    } catch (err) {
      console.warn('‚ö†Ô∏è Impossible de v√©rifier les permissions:', err);
      return 'prompt';
    }
  }, []);

  return {
    position,
    loading,
    error,
    isSupported,
    getCurrentPosition,
    clearPosition,
    checkPermission
  };
}

export default useGeolocation;

