

import { useState, useEffect, useCallback } from 'react';
import * as reportApi from '@/api/reportApi';

/**
 * Hook pour g√©rer les signalements admin (TOUS signalements, toutes communes)
 * 
 * @param {Object} filters - Filtres √† appliquer (commune_ids, types, statuses, priority, date_from, date_to)
 * @returns {Object} - { reports, loading, error, refetch, updateStatus, updatePriority }
 * 
 * @example
 * const { reports, loading, refetch } = useAdminReports({ 
 *   commune_ids: ['uuid-dakar', 'uuid-stlouis'],
 *   statuses: ['pending', 'in_progress']
 * });
 */
export function useAdminReports(filters = {}) {
  const [reports, setReports] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  /**
   * R√©cup√©rer tous les signalements avec filtres
   */
  const fetchReports = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      const { data, error: fetchError } = await reportApi.getAdminReports(filters);

      if (fetchError) {
        console.error('‚ùå Erreur r√©cup√©ration signalements admin:', fetchError);
        setError(fetchError.message || 'Erreur lors de la r√©cup√©ration');
        setReports([]);
      } else {
        setReports(data || []);
        console.log(`‚úÖ ${data?.length || 0} signalements r√©cup√©r√©s`);
      }
    } catch (err) {
      console.error('‚ùå Erreur inattendue useAdminReports:', err);
      setError('Une erreur inattendue est survenue');
      setReports([]);
    } finally {
      setLoading(false);
    }
  }, [filters.commune_ids, filters.types, filters.statuses, filters.priority, filters.date_from, filters.date_to]);

  /**
   * Mettre √† jour le statut d'un signalement
   * 
   * @param {string} reportId - UUID du signalement
   * @param {string} newStatus - Nouveau statut
   * @returns {Promise<{success: boolean, error: Object|null}>}
   */
  const updateStatus = async (reportId, newStatus) => {
    try {
      console.log(`üîÑ Mise √† jour statut: ${reportId} ‚Üí ${newStatus}`);

      const { data, error: updateError } = await reportApi.updateReportStatus(reportId, newStatus);

      if (updateError) {
        console.error('‚ùå Erreur mise √† jour statut:', updateError);
        return { success: false, error: updateError };
      }

      // Mettre √† jour localement (optimistic UI)
      setReports(prevReports =>
        prevReports.map(report =>
          report.id === reportId ? { ...report, status: newStatus } : report
        )
      );

      console.log('‚úÖ Statut mis √† jour avec succ√®s');
      return { success: true, error: null };

    } catch (err) {
      console.error('‚ùå Erreur inattendue updateStatus:', err);
      return { success: false, error: { message: 'Erreur inattendue' } };
    }
  };

  /**
   * Mettre √† jour la priorit√© d'un signalement
   * 
   * @param {string} reportId - UUID du signalement
   * @param {string} newPriority - Nouvelle priorit√©
   * @returns {Promise<{success: boolean, error: Object|null}>}
   */
  const updatePriority = async (reportId, newPriority) => {
    try {
      console.log(`üîÑ Mise √† jour priorit√©: ${reportId} ‚Üí ${newPriority}`);

      const { data, error: updateError } = await reportApi.updateReportPriority(reportId, newPriority);

      if (updateError) {
        console.error('‚ùå Erreur mise √† jour priorit√©:', updateError);
        return { success: false, error: updateError };
      }

      // Mettre √† jour localement (optimistic UI)
      setReports(prevReports =>
        prevReports.map(report =>
          report.id === reportId ? { ...report, priority: newPriority } : report
        )
      );

      console.log('‚úÖ Priorit√© mise √† jour avec succ√®s');
      return { success: true, error: null };

    } catch (err) {
      console.error('‚ùå Erreur inattendue updatePriority:', err);
      return { success: false, error: { message: 'Erreur inattendue' } };
    }
  };

  // Fetch initial et √† chaque changement de filtres
  useEffect(() => {
    fetchReports();
  }, [fetchReports]);

  return {
    reports,
    loading,
    error,
    refetch: fetchReports,
    updateStatus,
    updatePriority
  };
}

export default useAdminReports;

