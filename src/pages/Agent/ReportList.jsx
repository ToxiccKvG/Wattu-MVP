// @generated by Cursor AI (Claude) — verified by Kevin Mendy
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/context/AuthContext';
import useAgentReports from '@/hooks/useAgentReports';
import useReportFilters from '@/hooks/useReportFilters';
import FilterForm from '@/components/reports/FilterForm';
import ReportCard from '@/components/reports/ReportCard';
import { Button } from '@/components/ui/button';
import { Loader2, FileDown, Inbox } from 'lucide-react';
import * as reportService from '@/services/reportService';

/**
 * Page de liste complète des signalements pour AGENTS
 * 
 * Fonctionnalités :
 * - Affichage de tous les signalements de la commune
 * - Filtres (type, statut, priorité, date)
 * - Export CSV
 * - Navigation vers détails
 * 
 * Accès :
 * - Réservé aux agents (role='agent')
 * - Scope : commune_id de l'agent (RLS)
 * 
 * Usage :
 * <Route path="/agent/reports" element={<ReportList />} />
 */
function ReportList() {
  // ═══════════════════════════════════════════════════════════
  // HOOKS
  // ═══════════════════════════════════════════════════════════
  
  const navigate = useNavigate();
  const { user } = useAuth();
  const { filters, setFilter, resetFilters, activeFiltersCount } = useReportFilters();
  
  // Récupérer les signalements avec filtres appliqués
  const { reports, loading, error } = useAgentReports(user?.commune_id, {
    type: filters.type || undefined,
    status: filters.status || undefined,
    priority: filters.priority || undefined,
    date_from: filters.dateFrom ? filters.dateFrom.toISOString() : undefined,
    date_to: filters.dateTo ? filters.dateTo.toISOString() : undefined,
  });

  const [isExporting, setIsExporting] = useState(false);

  // ═══════════════════════════════════════════════════════════
  // HANDLERS
  // ═══════════════════════════════════════════════════════════

  /**
   * Naviguer vers la page de détail d'un signalement
   */
  const handleViewDetails = (reportId) => {
    navigate(`/agent/reports/${reportId}`);
  };

  /**
   * Export CSV des signalements filtrés
   */
  const handleExportCSV = () => {
    try {
      setIsExporting(true);
      const timestamp = new Date().toISOString().split('T')[0];
      const filename = `signalements_${timestamp}.csv`;
      reportService.downloadCSV(reports, filename);
      console.log(`✅ Export CSV réussi: ${reports.length} signalements`);
    } catch (err) {
      console.error('❌ Erreur export CSV:', err);
    } finally {
      setIsExporting(false);
    }
  };

  // ═══════════════════════════════════════════════════════════
  // RENDER
  // ═══════════════════════════════════════════════════════════

  return (
    <div className="space-y-6">
      {/* ═══════════════════════════════════════════════════════════
          HEADER
          ═══════════════════════════════════════════════════════════ */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-neutral-900">
            Signalements
          </h1>
          <p className="text-neutral-600 mt-1">
            Tous les signalements de votre commune
            {activeFiltersCount > 0 && (
              <span className="ml-2 text-primary-600 font-medium">
                ({activeFiltersCount} filtre{activeFiltersCount > 1 ? 's' : ''} actif{activeFiltersCount > 1 ? 's' : ''})
              </span>
            )}
          </p>
        </div>

        {/* Bouton Export CSV */}
        {reports.length > 0 && (
          <Button
            onClick={handleExportCSV}
            disabled={isExporting}
            variant="outline"
            className="hidden md:flex"
          >
            {isExporting ? (
              <>
                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                Export...
              </>
            ) : (
              <>
                <FileDown className="w-4 h-4 mr-2" />
                Exporter CSV
              </>
            )}
          </Button>
        )}
      </div>

      {/* ═══════════════════════════════════════════════════════════
          FILTRES
          ═══════════════════════════════════════════════════════════ */}
      <FilterForm
        filters={filters}
        onFilterChange={setFilter}
        onResetFilters={resetFilters}
      />

      {/* ═══════════════════════════════════════════════════════════
          LISTE DES SIGNALEMENTS
          ═══════════════════════════════════════════════════════════ */}
      
      {/* État de chargement */}
      {loading && (
        <div className="flex items-center justify-center py-16">
          <Loader2 className="w-8 h-8 text-primary-600 animate-spin" />
        </div>
      )}

      {/* Erreur */}
      {error && !loading && (
        <div className="bg-error-50 border border-error-200 rounded-lg p-6 text-center">
          <p className="text-error-700">{error}</p>
        </div>
      )}

      {/* Liste vide */}
      {!loading && !error && reports.length === 0 && (
        <div className="bg-white border border-neutral-200 rounded-lg p-12 text-center space-y-4">
          <Inbox className="w-16 h-16 text-neutral-300 mx-auto" />
          <div>
            <h3 className="text-lg font-semibold text-neutral-900">
              Aucun signalement trouvé
            </h3>
            <p className="text-sm text-neutral-600 mt-1">
              {activeFiltersCount > 0
                ? 'Essayez de modifier les filtres pour voir plus de résultats.'
                : 'Aucun signalement disponible pour votre commune.'}
            </p>
          </div>
          {activeFiltersCount > 0 && (
            <Button onClick={resetFilters} variant="outline">
              Réinitialiser les filtres
            </Button>
          )}
        </div>
      )}

      {/* Liste des signalements */}
      {!loading && !error && reports.length > 0 && (
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <p className="text-sm text-neutral-600">
              {reports.length} signalement{reports.length > 1 ? 's' : ''} trouvé{reports.length > 1 ? 's' : ''}
            </p>
            {/* Export mobile */}
            <Button
              onClick={handleExportCSV}
              disabled={isExporting}
              variant="ghost"
              size="sm"
              className="md:hidden"
            >
              <FileDown className="w-4 h-4" />
            </Button>
          </div>

          {reports.map((report) => (
            <ReportCard
              key={report.id}
              report={report}
              onViewDetails={handleViewDetails}
            />
          ))}
        </div>
      )}
    </div>
  );
}

export default ReportList;

