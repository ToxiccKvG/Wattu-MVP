// @generated by Cursor AI (Claude) — verified by Kevin Mendy
import { useState, useEffect, useCallback } from 'react';
import { useTranslation } from 'react-i18next';
import { Filter, Loader2 } from 'lucide-react';
import MapView from '@/components/maps/MapView';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Button } from '@/components/ui/button';
import useCommunes from '@/hooks/useCommunes';
import * as reportService from '@/services/reportService';

/**
 * Page CitizenMap - Carte interactive des signalements
 * 
 * Contenu :
 * - Carte Leaflet plein écran
 * - Markers pour tous les signalements
 * - Filtres (statut, commune)
 * - Popups avec détails
 */
function CitizenMap() {
  const { t } = useTranslation('common');
  const { communes, loading: communesLoading } = useCommunes();
  
  const [reports, setReports] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // Filtres
  const [statusFilter, setStatusFilter] = useState('');
  const [communeFilter, setCommuneFilter] = useState('');
  const [showFilters, setShowFilters] = useState(false);

  /**
   * Récupérer les signalements
   */
  const fetchReports = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      const options = {};
      if (statusFilter) options.status = statusFilter;
      if (communeFilter) options.commune_id = communeFilter;

      const result = await reportService.getAllReports(options);

      if (result.error) {
        setError(result.error.message);
        return;
      }

      setReports(result.data || []);
    } catch (err) {
      setError(err.message || 'Erreur de chargement');
    } finally {
      setLoading(false);
    }
  }, [statusFilter, communeFilter]);

  // Charger les signalements au montage et quand les filtres changent
  useEffect(() => {
    fetchReports();
  }, [fetchReports]);

  /**
   * Réinitialiser les filtres
   */
  const handleResetFilters = () => {
    setStatusFilter('');
    setCommuneFilter('');
  };

  // Calculer le centre de la carte (Dakar par défaut)
  const mapCenter = reports.length > 0
    ? { lat: reports[0].latitude, lng: reports[0].longitude }
    : { lat: 14.6928, lng: -17.4467 };

  return (
    <div className="space-y-4">
      {/* En-tête */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl md:text-3xl font-bold text-neutral-900">
            {t('map.title', { defaultValue: 'Carte des signalements' })}
          </h1>
          <p className="text-sm text-neutral-600 mt-1">
            {loading
              ? t('map.loading', { defaultValue: 'Chargement...' })
              : t('map.count', {
                  defaultValue: `${reports.length} signalement(s) affichés`,
                  count: reports.length
                })
            }
          </p>
        </div>

        {/* Toggle filtres */}
        <Button
          variant="outline"
          size="sm"
          onClick={() => setShowFilters(!showFilters)}
        >
          <Filter className="w-4 h-4 mr-2" />
          {t('map.filters', { defaultValue: 'Filtres' })}
        </Button>
      </div>

      {/* Panneau de filtres */}
      {showFilters && (
        <div className="bg-white rounded-lg border border-neutral-200 p-4 space-y-4">
          <div className="grid md:grid-cols-2 gap-4">
            {/* Filtre Statut */}
            <div>
              <label className="text-sm font-medium text-neutral-700 mb-2 block">
                {t('map.status_filter', { defaultValue: 'Statut' })}
              </label>
              <div className="relative">
                <Select value={statusFilter} onValueChange={setStatusFilter}>
                  <SelectTrigger>
                    <SelectValue placeholder={t('map.all_statuses', { defaultValue: 'Tous les statuts' })} />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="pending">{t('status.pending', { defaultValue: 'En attente' })}</SelectItem>
                    <SelectItem value="in_progress">{t('status.in_progress', { defaultValue: 'En cours' })}</SelectItem>
                    <SelectItem value="resolved">{t('status.resolved', { defaultValue: 'Résolu' })}</SelectItem>
                    <SelectItem value="rejected">{t('status.rejected', { defaultValue: 'Rejeté' })}</SelectItem>
                  </SelectContent>
                </Select>
                {statusFilter && (
                  <button
                    onClick={() => setStatusFilter('')}
                    className="absolute right-8 top-1/2 -translate-y-1/2 text-neutral-400 hover:text-neutral-600"
                    aria-label="Réinitialiser"
                  >
                    ✕
                  </button>
                )}
              </div>
            </div>

            {/* Filtre Commune */}
            <div>
              <label className="text-sm font-medium text-neutral-700 mb-2 block">
                {t('map.commune_filter', { defaultValue: 'Commune' })}
              </label>
              <div className="relative">
                <Select
                  value={communeFilter}
                  onValueChange={setCommuneFilter}
                  disabled={communesLoading}
                >
                  <SelectTrigger>
                    <SelectValue placeholder={t('map.all_communes', { defaultValue: 'Toutes les communes' })} />
                  </SelectTrigger>
                  <SelectContent>
                    {communes.map((commune) => (
                      <SelectItem key={commune.id} value={commune.id}>
                        {commune.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {communeFilter && (
                  <button
                    onClick={() => setCommuneFilter('')}
                    className="absolute right-8 top-1/2 -translate-y-1/2 text-neutral-400 hover:text-neutral-600"
                    aria-label="Réinitialiser"
                  >
                    ✕
                  </button>
                )}
              </div>
            </div>
          </div>

          {/* Bouton réinitialiser */}
          {(statusFilter || communeFilter) && (
            <Button
              variant="ghost"
              size="sm"
              onClick={handleResetFilters}
              className="w-full"
            >
              {t('map.reset_filters', { defaultValue: 'Réinitialiser les filtres' })}
            </Button>
          )}
        </div>
      )}

      {/* Carte */}
      {loading ? (
        <div className="flex items-center justify-center h-96 bg-neutral-100 rounded-lg">
          <div className="text-center space-y-2">
            <Loader2 className="w-8 h-8 text-primary-600 animate-spin mx-auto" />
            <p className="text-sm text-neutral-600">
              {t('map.loading', { defaultValue: 'Chargement de la carte...' })}
            </p>
          </div>
        </div>
      ) : error ? (
        <div className="flex items-center justify-center h-96 bg-red-50 rounded-lg border border-red-200">
          <div className="text-center space-y-2">
            <p className="text-red-700">{error}</p>
            <Button onClick={fetchReports} variant="outline" size="sm">
              {t('map.retry', { defaultValue: 'Réessayer' })}
            </Button>
          </div>
        </div>
      ) : (
        <MapView
          center={mapCenter}
          zoom={12}
          reports={reports}
          height="calc(100vh - 320px)"
        />
      )}
    </div>
  );
}

export default CitizenMap;

