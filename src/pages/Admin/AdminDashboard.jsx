// @generated by Cursor AI (Claude) — verified by Kevin Mendy

import { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { Loader2, RefreshCw } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import GlobalStats from '@/components/admin/GlobalStats';
import TopCommunes from '@/components/admin/TopCommunes';
import TrendsChart from '@/components/admin/TrendsChart';
import { useGlobalStats } from '@/hooks/useGlobalStats';
import * as reportApi from '@/api/reportApi';
import * as reportService from '@/services/reportService';

/**
 * Page AdminDashboard
 * Vue d'ensemble pour l'administrateur
 * - Stats globales (5 cards)
 * - Top 5 communes
 * - Graphique évolution (30 jours)
 */
function AdminDashboard() {
  const { t } = useTranslation('admin');
  const { stats, loading: statsLoading, refetch: refetchStats } = useGlobalStats();

  const [topCommunes, setTopCommunes] = useState([]);
  const [topLoading, setTopLoading] = useState(true);

  const [trends, setTrends] = useState([]);
  const [trendsLoading, setTrendsLoading] = useState(true);

  const [error, setError] = useState(null);
  const [refreshing, setRefreshing] = useState(false);

  /**
   * Récupérer le top communes
   */
  const fetchTopCommunes = async () => {
    try {
      setTopLoading(true);
      const { data, error: fetchError } = await reportApi.getTopCommunes(5);

      if (fetchError) {
        console.error('❌ Erreur récupération top communes:', fetchError);
        setError('Erreur lors de la récupération des top communes');
      } else {
        setTopCommunes(data || []);
      }
    } catch (err) {
      console.error('❌ Erreur inattendue fetchTopCommunes:', err);
      setError('Une erreur inattendue est survenue');
    } finally {
      setTopLoading(false);
    }
  };

  /**
   * Récupérer les trends (30 derniers jours)
   */
  const fetchTrends = async () => {
    try {
      setTrendsLoading(true);
      const { analytics, error: fetchError } = await reportService.calculateGlobalAnalytics();

      if (fetchError) {
        console.error('❌ Erreur récupération trends:', fetchError);
        setError('Erreur lors de la récupération des tendances');
      } else {
        setTrends(analytics?.trends || []);
      }
    } catch (err) {
      console.error('❌ Erreur inattendue fetchTrends:', err);
      setError('Une erreur inattendue est survenue');
    } finally {
      setTrendsLoading(false);
    }
  };

  /**
   * Rafraîchir toutes les données
   */
  const handleRefresh = async () => {
    setRefreshing(true);
    setError(null);

    await Promise.all([
      refetchStats(),
      fetchTopCommunes(),
      fetchTrends()
    ]);

    setRefreshing(false);
  };

  // Fetch initial
  useEffect(() => {
    fetchTopCommunes();
    fetchTrends();
  }, []);

  const isLoading = statsLoading || topLoading || trendsLoading;

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-neutral-900">
            {t('dashboard.title', { defaultValue: 'Tableau de bord Admin' })}
          </h1>
          <p className="text-neutral-600 mt-1">
            {t('dashboard.subtitle', { defaultValue: 'Vue d\'ensemble de la plateforme WattU' })}
          </p>
        </div>

        <Button
          onClick={handleRefresh}
          disabled={refreshing}
          variant="outline"
          className="flex items-center gap-2"
        >
          {refreshing ? (
            <Loader2 className="w-4 h-4 animate-spin" />
          ) : (
            <RefreshCw className="w-4 h-4" />
          )}
          {t('dashboard.refresh', { defaultValue: 'Actualiser' })}
        </Button>
      </div>

      {/* Erreur globale */}
      {error && (
        <div className="bg-red-50 border-2 border-red-200 rounded-lg p-4">
          <p className="text-red-800 font-medium">{error}</p>
        </div>
      )}

      {/* Stats globales (5 cards) */}
      {statsLoading ? (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4">
          {[1, 2, 3, 4, 5].map(i => (
            <Card key={i}>
              <CardHeader className="flex flex-row items-center justify-between pb-2">
                <Skeleton className="h-4 w-20" />
                <Skeleton className="h-4 w-4 rounded-full" />
              </CardHeader>
              <CardContent>
                <Skeleton className="h-8 w-12 mb-2" />
                <Skeleton className="h-3 w-24" />
              </CardContent>
            </Card>
          ))}
        </div>
      ) : (
        <GlobalStats stats={stats} />
      )}

      {/* Grid 2 colonnes */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Colonne gauche: Top Communes (1/3) */}
        <div className="lg:col-span-1">
          <TopCommunes topCommunes={topCommunes} loading={topLoading} />
        </div>

        {/* Colonne droite: Trends Chart (2/3) */}
        <div className="lg:col-span-2">
          <TrendsChart trends={trends} loading={trendsLoading} />
        </div>
      </div>

      {/* Footer info */}
      <div className="text-center text-sm text-neutral-500 pt-4 border-t border-neutral-200">
        {t('dashboard.footer', { 
          defaultValue: 'Les données sont mises à jour en temps réel. Dernière actualisation:' 
        })}{' '}
        <span className="font-medium">{new Date().toLocaleTimeString('fr-FR')}</span>
      </div>
    </div>
  );
}

export default AdminDashboard;
