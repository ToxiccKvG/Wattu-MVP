// @generated by Cursor AI (Claude) ‚Äî verified by Kevin Mendy
import { supabase } from '@/config/supabase';

/**
 * API Layer pour Supabase Storage (Images de signalements)
 * 
 * Interactions directes avec Supabase Storage :
 * - UPLOAD : Upload une image pour un signalement
 * - DELETE : Supprimer une image (admins uniquement)
 * - GET URL : R√©cup√©rer l'URL publique d'une image
 * 
 * Bucket : report-images
 * - Public : true
 * - Limite : 5MB
 * - Types : image/jpeg, image/png, image/jpg, image/webp
 * - Organisation : report-images/reports/{report-id}-{timestamp}.ext
 */

/**
 * Types MIME autoris√©s pour les images
 */
const ALLOWED_IMAGE_TYPES = [
  'image/jpeg',
  'image/jpg',
  'image/png',
  'image/webp'
];

/**
 * Taille maximale du fichier (5MB)
 */
const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB en bytes

/**
 * Upload une image pour un signalement
 * 
 * @param {File} file - Fichier image √† uploader
 * @param {string} [reportId] - ID du signalement (optionnel, g√©n√©r√© si absent)
 * 
 * @returns {Promise<{url: string|null, path: string|null, error: Object|null}>}
 * 
 * @example
 * const result = await uploadReportImage(file, 'uuid-report');
 * if (result.error) {
 *   console.error('Erreur upload:', result.error.message);
 * } else {
 *   console.log('URL publique:', result.url);
 * }
 */
export async function uploadReportImage(file, reportId = null) {
  try {
    // Validation 1: Fichier pr√©sent
    if (!file) {
      return {
        url: null,
        path: null,
        error: {
          message: 'Aucun fichier fourni',
          code: 'NO_FILE'
        }
      };
    }

    // Validation 2: Type MIME autoris√©
    if (!ALLOWED_IMAGE_TYPES.includes(file.type)) {
      return {
        url: null,
        path: null,
        error: {
          message: `Type de fichier non autoris√©. Types accept√©s: ${ALLOWED_IMAGE_TYPES.join(', ')}`,
          code: 'INVALID_FILE_TYPE'
        }
      };
    }

    // Validation 3: Taille du fichier (max 5MB)
    if (file.size > MAX_FILE_SIZE) {
      return {
        url: null,
        path: null,
        error: {
          message: `Fichier trop volumineux (max 5MB). Taille actuelle: ${(file.size / 1024 / 1024).toFixed(2)}MB`,
          code: 'FILE_TOO_LARGE'
        }
      };
    }

    // G√©n√©ration du nom du fichier
    // Format : reports/{reportId}-{timestamp}.{extension}
    const timestamp = Date.now();
    const extension = file.name.split('.').pop();
    const reportUuid = reportId || `temp-${timestamp}`;
    const fileName = `${reportUuid}-${timestamp}.${extension}`;
    const filePath = `reports/${fileName}`;

    console.log(`üì§ Upload en cours: ${filePath} (${(file.size / 1024).toFixed(2)}KB)`);

    // Upload vers Supabase Storage
    const { data, error } = await supabase.storage
      .from('report-images')
      .upload(filePath, file, {
        cacheControl: '3600',
        upsert: false // Ne pas √©craser si le fichier existe d√©j√†
      });

    if (error) {
      console.error('‚ùå Erreur upload Supabase Storage:', error);
      return { url: null, path: null, error };
    }

    // R√©cup√©ration de l'URL publique
    const { data: publicUrlData } = supabase.storage
      .from('report-images')
      .getPublicUrl(filePath);

    const publicUrl = publicUrlData.publicUrl;

    console.log('‚úÖ Image upload√©e:', publicUrl);

    return {
      url: publicUrl,
      path: filePath,
      error: null
    };

  } catch (err) {
    console.error('‚ùå Erreur inattendue uploadReportImage:', err);
    return {
      url: null,
      path: null,
      error: {
        message: err.message || 'Erreur inattendue',
        code: 'UNEXPECTED_ERROR'
      }
    };
  }
}

/**
 * Supprimer une image du storage
 * 
 * Note : Cette fonction devrait √™tre r√©serv√©e aux admins
 * La policy Supabase `report_images_admin_delete` prot√®ge cette action
 * 
 * @param {string} filePath - Chemin du fichier dans le bucket (ex: 'reports/uuid-123.jpg')
 * 
 * @returns {Promise<{success: boolean, error: Object|null}>}
 * 
 * @example
 * const result = await deleteReportImage('reports/uuid-123.jpg');
 */
export async function deleteReportImage(filePath) {
  try {
    if (!filePath) {
      return {
        success: false,
        error: {
          message: 'Chemin du fichier requis',
          code: 'NO_FILE_PATH'
        }
      };
    }

    console.log(`üóëÔ∏è Suppression en cours: ${filePath}`);

    const { data, error } = await supabase.storage
      .from('report-images')
      .remove([filePath]);

    if (error) {
      console.error('‚ùå Erreur suppression image:', error);
      return { success: false, error };
    }

    console.log('‚úÖ Image supprim√©e:', filePath);
    return { success: true, error: null };

  } catch (err) {
    console.error('‚ùå Erreur inattendue deleteReportImage:', err);
    return {
      success: false,
      error: {
        message: err.message || 'Erreur inattendue',
        code: 'UNEXPECTED_ERROR'
      }
    };
  }
}

/**
 * R√©cup√©rer l'URL publique d'une image
 * 
 * @param {string} filePath - Chemin du fichier dans le bucket
 * 
 * @returns {string|null} URL publique de l'image
 * 
 * @example
 * const url = getPublicUrl('reports/uuid-123.jpg');
 */
export function getPublicUrl(filePath) {
  try {
    if (!filePath) {
      console.error('‚ùå Chemin du fichier requis');
      return null;
    }

    const { data } = supabase.storage
      .from('report-images')
      .getPublicUrl(filePath);

    return data.publicUrl;

  } catch (err) {
    console.error('‚ùå Erreur inattendue getPublicUrl:', err);
    return null;
  }
}

/**
 * V√©rifier si un type MIME est autoris√©
 * 
 * @param {string} mimeType - Type MIME √† v√©rifier
 * @returns {boolean} true si autoris√©, false sinon
 * 
 * @example
 * isAllowedImageType('image/jpeg') // true
 * isAllowedImageType('image/gif') // false
 */
export function isAllowedImageType(mimeType) {
  return ALLOWED_IMAGE_TYPES.includes(mimeType);
}

/**
 * V√©rifier si la taille du fichier est valide
 * 
 * @param {number} fileSize - Taille du fichier en bytes
 * @returns {boolean} true si valide, false sinon
 * 
 * @example
 * isValidFileSize(2 * 1024 * 1024) // true (2MB)
 * isValidFileSize(10 * 1024 * 1024) // false (10MB)
 */
export function isValidFileSize(fileSize) {
  return fileSize <= MAX_FILE_SIZE;
}

export default {
  uploadReportImage,
  deleteReportImage,
  getPublicUrl,
  isAllowedImageType,
  isValidFileSize,
  ALLOWED_IMAGE_TYPES,
  MAX_FILE_SIZE
};

