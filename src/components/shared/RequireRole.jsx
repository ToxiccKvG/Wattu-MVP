// @generated by Cursor AI (Claude) — verified by Kevin Mendy
import { Navigate } from 'react-router-dom';
import { useAuth } from '@/context/AuthContext';

/**
 * Composant de vérification du rôle (Role-based Access Control)
 * 
 * Rôle :
 * - Vérifie si l'utilisateur a le bon rôle pour accéder à une route
 * - Si OUI → Affiche le contenu (children)
 * - Si NON → Redirige vers la route appropriée selon son rôle
 * 
 * Utilisé pour :
 * - Protéger les routes /admin/* (réservées aux admins)
 * - Protéger les routes /agent/* (réservées aux agents)
 * - Empêcher un agent d'accéder aux fonctionnalités admin
 * 
 * Sécurité :
 * - Double protection : RequireAuth + RequireRole
 * - Vérification côté frontend (+ RLS Supabase côté backend)
 * 
 * Usage dans App.jsx :
 * <Route element={<RequireAuth><RequireRole allowedRoles={['admin']}><DashboardLayout /></RequireRole></RequireAuth>}>
 *   <Route path="/admin/dashboard" element={<AdminDashboard />} />
 * </Route>
 * 
 * @param {Object} props
 * @param {ReactNode} props.children - Composants à protéger
 * @param {Array<string>} props.allowedRoles - Rôles autorisés (ex: ['admin'], ['agent'], ['admin', 'agent'])
 */
function RequireRole({ children, allowedRoles = [] }) {
  // ═══════════════════════════════════════════════════════════
  // HOOKS
  // ═══════════════════════════════════════════════════════════
  
  const { user, userRole } = useAuth();

  // ═══════════════════════════════════════════════════════════
  // LOGIQUE DE VÉRIFICATION
  // ═══════════════════════════════════════════════════════════

  /**
   * Vérifier si le user a un rôle autorisé
   */
  const hasRequiredRole = userRole && allowedRoles.includes(userRole);

  /**
   * Si le user n'a pas le bon rôle → Redirection
   * 
   * Stratégie de redirection :
   * - Agent essaie d'accéder à /admin/* → Redirige vers /agent/dashboard
   * - Admin essaie d'accéder à /agent/* → Redirige vers /admin/dashboard (rare, mais possible)
   * - Rôle inconnu → Redirige vers /login
   */
  if (!hasRequiredRole) {
    // Déterminer la route de redirection selon le rôle actuel
    let redirectPath = '/';

    if (userRole === 'agent') {
      redirectPath = '/agent/dashboard';
    } else if (userRole === 'admin') {
      redirectPath = '/admin/dashboard';
    } else {
      // Pas de rôle valide → Retour à login (sécurité)
      redirectPath = '/login';
    }

    return <Navigate to={redirectPath} replace />;
  }

  /**
   * Le user a le bon rôle ✅
   * → Afficher le contenu protégé
   */
  return children;
}

export default RequireRole;

