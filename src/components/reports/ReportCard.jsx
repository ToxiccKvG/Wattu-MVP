// @generated by Cursor AI (Claude) ‚Äî verified by Kevin Mendy
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import StatusBadge from './StatusBadge';
import PriorityBadge from './PriorityBadge';
import { MapPin, Calendar, User, Image as ImageIcon } from 'lucide-react';
import { useNavigate } from 'react-router-dom';

/**
 * Card affichant un signalement individuel dans une liste
 * 
 * Affiche :
 * - Photo miniature (si disponible)
 * - Type et description (extrait)
 * - Badges statut et priorit√©
 * - Date de cr√©ation
 * - Nom du citoyen
 * - Bouton "Voir d√©tails"
 * 
 * @param {Object} props
 * @param {Object} props.report - Signalement √† afficher
 * @param {Function} [props.onViewDetails] - Callback au clic sur "Voir d√©tails"
 * @param {string} [props.className] - Classes CSS additionnelles
 * 
 * @example
 * <ReportCard
 *   report={report}
 *   onViewDetails={(id) => navigate(`/agent/reports/${id}`)}
 * />
 */
function ReportCard({ report, onViewDetails, className = '' }) {
  const navigate = useNavigate();

  /**
   * G√©rer le clic sur "Voir d√©tails"
   */
  const handleViewDetails = () => {
    if (onViewDetails) {
      onViewDetails(report.id);
    } else {
      // Redirection par d√©faut
      navigate(`/agent/reports/${report.id}`);
    }
  };

  /**
   * Formater la date en fran√ßais
   */
  const formatDate = (dateString) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString('fr-FR', {
      day: '2-digit',
      month: 'short',
      year: 'numeric'
    });
  };

  /**
   * Tronquer la description (max 100 caract√®res)
   */
  const truncateDescription = (text, maxLength = 100) => {
    if (!text) return 'Aucune description';
    if (text.length <= maxLength) return text;
    return `${text.substring(0, maxLength)}...`;
  };

  return (
    <Card className={`hover:shadow-md transition-shadow duration-200 ${className}`}>
      <CardHeader className="pb-3">
        <div className="flex gap-4">
          {/* Photo miniature */}
          <div className="flex-shrink-0">
            {report.image_url ? (
              <img
                src={report.image_url}
                alt={`Photo ${report.type}`}
                className="w-20 h-20 md:w-24 md:h-24 rounded-lg object-cover border border-neutral-200 bg-neutral-50"
                loading="lazy"
                onError={(e) => {
                  console.error('‚ùå Erreur chargement photo miniature:', report.image_url);
                  console.log('üìã Report ID:', report.id);
                  // Remplacer par le placeholder
                  e.target.style.display = 'none';
                  e.target.parentElement.innerHTML = `
                    <div class="w-20 h-20 md:w-24 md:h-24 rounded-lg bg-neutral-100 border border-neutral-200 flex items-center justify-center">
                      <svg class="w-8 h-8 text-neutral-400" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                        <circle cx="8.5" cy="8.5" r="1.5"></circle>
                        <polyline points="21 15 16 10 5 21"></polyline>
                      </svg>
                    </div>
                  `;
                }}
              />
            ) : (
              <div className="w-20 h-20 md:w-24 md:h-24 rounded-lg bg-neutral-100 border border-neutral-200 flex items-center justify-center">
                <ImageIcon className="w-8 h-8 text-neutral-400" />
              </div>
            )}
          </div>

          {/* Contenu principal */}
          <div className="flex-1 flex flex-col gap-2">
            <div className="flex items-start justify-between gap-4">
              {/* Titre et description */}
              <div className="flex-1 space-y-1">
                <h3 className="font-semibold text-lg text-neutral-900 capitalize">
                  {report.type?.replace('_', ' ') || 'Type inconnu'}
                </h3>
                <p className="text-sm text-neutral-600 line-clamp-2">
                  {truncateDescription(report.description)}
                </p>
              </div>

              {/* Badges */}
              <div className="flex flex-col gap-2 items-end flex-shrink-0">
                <StatusBadge status={report.status} />
                <PriorityBadge priority={report.priority} />
              </div>
            </div>
          </div>
        </div>
      </CardHeader>

      <CardContent className="pt-0">
        <div className="flex items-center justify-between pl-24 md:pl-28">
          {/* M√©tadonn√©es */}
          <div className="flex flex-wrap items-center gap-4 text-sm text-neutral-500">
            {/* Date */}
            <div className="flex items-center gap-1">
              <Calendar className="w-4 h-4" />
              <span>{formatDate(report.created_at)}</span>
            </div>

            {/* Citoyen */}
            {report.citizen_name && (
              <div className="flex items-center gap-1">
                <User className="w-4 h-4" />
                <span className="truncate max-w-[150px]">
                  {report.citizen_name}
                </span>
              </div>
            )}

            {/* Position GPS (optionnel) */}
            {report.latitude && report.longitude && (
              <div className="hidden md:flex items-center gap-1">
                <MapPin className="w-4 h-4" />
                <span>
                  {report.latitude.toFixed(4)}, {report.longitude.toFixed(4)}
                </span>
              </div>
            )}
          </div>

          {/* Bouton D√©tails */}
          <Button
            size="sm"
            onClick={handleViewDetails}
            className="ml-2 flex-shrink-0"
          >
            D√©tails
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}

export default ReportCard;

