// @generated by Cursor AI (Claude) ‚Äî verified by Kevin Mendy
import { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import PriorityBadge from './PriorityBadge';
import { Loader2 } from 'lucide-react';

/**
 * Formulaire pour mettre √† jour la priorit√© d'un signalement
 * 
 * Fonctionnalit√©s :
 * - Affiche la priorit√© actuelle (badge)
 * - Dropdown pour s√©lectionner la nouvelle priorit√©
 * - Bouton de soumission
 * 
 * @param {Object} props
 * @param {string} props.currentPriority - Priorit√© actuelle du signalement (low, normal, high, urgent)
 * @param {Function} props.onSubmit - Callback √† la soumission (newPriority)
 * @param {boolean} [props.loading] - Affiche un spinner pendant l'update
 * @param {string} [props.className] - Classes CSS additionnelles
 * 
 * @example
 * <PriorityUpdateForm
 *   currentPriority="normal"
 *   onSubmit={(newPriority) => updatePriority(reportId, newPriority)}
 *   loading={updating}
 * />
 */
function PriorityUpdateForm({
  currentPriority,
  onSubmit,
  loading = false,
  className = ''
}) {
  const { t } = useTranslation('common');
  const [selectedPriority, setSelectedPriority] = useState('');

  /**
   * Configuration des priorit√©s
   */
  const priorityOptions = [
    { 
      value: 'urgent', 
      label: t('priority.urgent', { defaultValue: 'Urgent' }),
      emoji: 'üî¥'
    },
    { 
      value: 'high', 
      label: t('priority.high', { defaultValue: '√âlev√©e' }),
      emoji: 'üü†'
    },
    { 
      value: 'normal', 
      label: t('priority.normal', { defaultValue: 'Normal' }),
      emoji: 'üîµ'
    },
    { 
      value: 'low', 
      label: t('priority.low', { defaultValue: 'Faible' }),
      emoji: '‚ö™'
    }
  ];

  /**
   * G√©rer la soumission du formulaire
   */
  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (!selectedPriority) {
      console.warn('‚ö†Ô∏è Aucune priorit√© s√©lectionn√©e');
      return;
    }

    if (selectedPriority === currentPriority) {
      console.warn('‚ö†Ô∏è La priorit√© s√©lectionn√©e est identique √† la priorit√© actuelle');
      return;
    }

    onSubmit(selectedPriority);
  };

  return (
    <form onSubmit={handleSubmit} className={`space-y-4 ${className}`}>
      {/* Priorit√© actuelle */}
      <div>
        <Label className="text-sm font-medium text-neutral-700">
          Priorit√© actuelle
        </Label>
        <div className="mt-2">
          <PriorityBadge priority={currentPriority} />
        </div>
      </div>

      {/* Nouvelle priorit√© */}
      <div>
        <Label htmlFor="new-priority" className="text-sm font-medium text-neutral-700">
          Nouvelle priorit√© <span className="text-error-500">*</span>
        </Label>
        <Select
          value={selectedPriority}
          onValueChange={setSelectedPriority}
          disabled={loading}
        >
          <SelectTrigger id="new-priority" className="mt-2">
            <SelectValue placeholder="S√©lectionnez une priorit√©" />
          </SelectTrigger>
          <SelectContent>
            {priorityOptions.map((option) => (
              <SelectItem key={option.value} value={option.value}>
                {option.emoji} {option.label}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
        <p className="text-xs text-neutral-500 mt-1">
          √âvaluez la priorit√© en fonction de la gravit√© et de l'urgence du probl√®me
        </p>
      </div>

      {/* Bouton de soumission */}
      <Button
        type="submit"
        disabled={!selectedPriority || loading || selectedPriority === currentPriority}
        className="w-full"
      >
        {loading ? (
          <>
            <Loader2 className="w-4 h-4 mr-2 animate-spin" />
            Mise √† jour en cours...
          </>
        ) : (
          'Mettre √† jour la priorit√©'
        )}
      </Button>
    </form>
  );
}

export default PriorityUpdateForm;

