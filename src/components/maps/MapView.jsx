// @generated by Cursor AI (Claude) ‚Äî verified by Kevin Mendy
import { MapContainer, TileLayer, Marker, Popup, useMapEvents } from 'react-leaflet';
import { useTranslation } from 'react-i18next';
import L from 'leaflet';

/**
 * Composant MapView - Carte Leaflet interactive
 * 
 * Fonctionnalit√©s :
 * - Affichage carte OpenStreetMap
 * - Markers pour signalements
 * - Popups avec d√©tails
 * - Click sur la carte pour s√©lectionner une position
 * - Centrage automatique sur une position
 * 
 * Props :
 * @param {Object} center - Centre de la carte { lat, lng }
 * @param {number} zoom - Niveau de zoom (default: 13)
 * @param {Array} reports - Liste des signalements √† afficher
 * @param {function} onMapClick - Callback quand on clique sur la carte
 * @param {Object} selectedPosition - Position s√©lectionn√©e { lat, lng }
 * @param {string} height - Hauteur de la carte (default: '400px')
 * @param {boolean} scrollWheelZoom - Autoriser le zoom avec la molette (default: true)
 * 
 * @example
 * <MapView
 *   center={{ lat: 14.6928, lng: -17.4467 }}
 *   zoom={13}
 *   reports={reports}
 *   onMapClick={(latlng) => console.log(latlng)}
 *   selectedPosition={position}
 *   height="600px"
 * />
 */

// Fix des ic√¥nes Leaflet par d√©faut (probl√®me connu avec Webpack/Vite)
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
});

// Ic√¥ne personnalis√©e pour le marker de s√©lection (bleu)
const selectedIcon = new L.Icon({
  iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
  iconSize: [25, 41],
  iconAnchor: [12, 41],
  popupAnchor: [1, -34],
  shadowSize: [41, 41]
});

// Ic√¥ne personnalis√©e pour les signalements (rouge)
const reportIcon = new L.Icon({
  iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
  iconSize: [25, 41],
  iconAnchor: [12, 41],
  popupAnchor: [1, -34],
  shadowSize: [41, 41]
});

/**
 * Composant interne pour g√©rer les clics sur la carte
 */
function MapClickHandler({ onMapClick }) {
  useMapEvents({
    click(e) {
      if (onMapClick) {
        onMapClick({ lat: e.latlng.lat, lng: e.latlng.lng });
      }
    },
  });
  return null;
}

/**
 * Composant principal MapView
 */
function MapView({
  center = { lat: 14.6928, lng: -17.4467 }, // Dakar par d√©faut
  zoom = 13,
  reports = [],
  onMapClick = null,
  selectedPosition = null,
  height = '400px',
  scrollWheelZoom = true
}) {
  const { t } = useTranslation('common');

  return (
    <div style={{ height, width: '100%' }} className="rounded-lg overflow-hidden border-2 border-neutral-200">
      <MapContainer
        center={[center.lat, center.lng]}
        zoom={zoom}
        scrollWheelZoom={scrollWheelZoom}
        style={{ height: '100%', width: '100%' }}
      >
        {/* Tuiles OpenStreetMap */}
        <TileLayer
          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        />

        {/* Handler de click sur la carte */}
        {onMapClick && <MapClickHandler onMapClick={onMapClick} />}

        {/* Marker de position s√©lectionn√©e (bleu) */}
        {selectedPosition && (
          <Marker
            position={[selectedPosition.lat, selectedPosition.lng]}
            icon={selectedIcon}
          >
            <Popup>
              <div className="text-sm">
                <p className="font-semibold text-primary-600">
                  {t('map.selected_position', { defaultValue: 'Position s√©lectionn√©e' })}
                </p>
                <p className="text-neutral-600 mt-1">
                  {selectedPosition.lat.toFixed(6)}, {selectedPosition.lng.toFixed(6)}
                </p>
              </div>
            </Popup>
          </Marker>
        )}

        {/* Markers des signalements (rouge) */}
        {reports.map((report) => (
          <Marker
            key={report.id}
            position={[report.latitude, report.longitude]}
            icon={reportIcon}
          >
            <Popup>
              <div className="text-sm space-y-2 min-w-[200px]">
                {/* Type */}
                <div>
                  <p className="font-semibold text-neutral-900">
                    {report.type}
                  </p>
                </div>

                {/* Description */}
                {report.description && (
                  <div>
                    <p className="text-neutral-600 text-xs">
                      {report.description.length > 100
                        ? `${report.description.substring(0, 100)}...`
                        : report.description
                      }
                    </p>
                  </div>
                )}

                {/* Statut */}
                <div className="flex items-center gap-2">
                  <span className={`px-2 py-0.5 rounded-full text-xs font-medium ${
                    report.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                    report.status === 'in_progress' ? 'bg-blue-100 text-blue-800' :
                    report.status === 'resolved' ? 'bg-green-100 text-green-800' :
                    'bg-red-100 text-red-800'
                  }`}>
                    {t(`status.${report.status}`, { defaultValue: report.status })}
                  </span>
                </div>

                {/* Commune */}
                {report.commune?.name && (
                  <div>
                    <p className="text-neutral-500 text-xs">
                      üìç {report.commune.name}
                    </p>
                  </div>
                )}

                {/* Image */}
                {report.image_url && (
                  <div className="mt-2">
                    <img
                      src={report.image_url}
                      alt="Signalement"
                      className="w-full h-32 object-cover rounded"
                      loading="lazy"
                    />
                  </div>
                )}

                {/* Date */}
                <div>
                  <p className="text-neutral-400 text-xs">
                    {new Date(report.created_at).toLocaleDateString('fr-FR', {
                      day: 'numeric',
                      month: 'short',
                      year: 'numeric',
                      hour: '2-digit',
                      minute: '2-digit'
                    })}
                  </p>
                </div>
              </div>
            </Popup>
          </Marker>
        ))}
      </MapContainer>
    </div>
  );
}

export default MapView;

