// @generated by Cursor AI (Claude) — verified by Kevin Mendy
import { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { MapPin, Navigation } from 'lucide-react';
import { Button } from '@/components/ui/button';
import MapView from './MapView';
import useGeolocation from '@/hooks/useGeolocation';

/**
 * Composant LocationPicker - Sélection de position GPS ou manuelle
 * 
 * Fonctionnalités :
 * - Toggle entre GPS automatique et sélection manuelle
 * - Bouton "Utiliser ma position GPS"
 * - Carte interactive pour sélection manuelle
 * - Affichage des coordonnées sélectionnées
 * 
 * Props :
 * @param {Object} value - Position actuelle { lat, lng }
 * @param {function} onChange - Callback quand la position change
 * @param {Object} error - Erreur de validation
 * 
 * @example
 * <LocationPicker
 *   value={position}
 *   onChange={(pos) => setPosition(pos)}
 *   error={errors.position}
 * />
 */
function LocationPicker({ value, onChange, error }) {
  const { t } = useTranslation('common');
  const [mode, setMode] = useState('gps'); // 'gps' ou 'manual'
  const { loading: gpsLoading, error: gpsError, getCurrentPosition } = useGeolocation();

  /**
   * Récupérer la position GPS automatiquement
   */
  const handleGetGPS = async () => {
    try {
      const position = await getCurrentPosition();
      onChange({ lat: position.latitude, lng: position.longitude });
      setMode('gps');
    } catch (err) {
      console.error('Erreur GPS:', err);
      // L'erreur est déjà gérée par useGeolocation
    }
  };

  /**
   * Sélectionner une position manuellement sur la carte
   */
  const handleMapClick = (latlng) => {
    onChange(latlng);
    setMode('manual');
  };

  return (
    <div className="space-y-4">
      {/* Label */}
      <div>
        <label className="block text-sm font-medium text-neutral-900 mb-2">
          {t('form.location', { defaultValue: 'Emplacement' })}
          <span className="text-red-500 ml-1">*</span>
        </label>
        <p className="text-sm text-neutral-600 mb-3">
          {t('form.location_desc', { defaultValue: 'Utilisez votre GPS ou cliquez sur la carte' })}
        </p>
      </div>

      {/* Bouton GPS */}
      <Button
        type="button"
        onClick={handleGetGPS}
        disabled={gpsLoading}
        variant="outline"
        className="w-full"
      >
        <Navigation className={`w-4 h-4 mr-2 ${gpsLoading ? 'animate-spin' : ''}`} />
        {gpsLoading
          ? t('form.gps_loading', { defaultValue: 'Chargement GPS...' })
          : t('form.use_gps', { defaultValue: 'Utiliser ma position GPS' })
        }
      </Button>

      {/* Erreur GPS */}
      {gpsError && (
        <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
          <p className="text-sm text-red-700">
            {gpsError.message}
          </p>
        </div>
      )}

      {/* Séparateur */}
      <div className="relative">
        <div className="absolute inset-0 flex items-center">
          <div className="w-full border-t border-neutral-300"></div>
        </div>
        <div className="relative flex justify-center text-sm">
          <span className="px-2 bg-white text-neutral-500">
            {t('form.or', { defaultValue: 'OU' })}
          </span>
        </div>
      </div>

      {/* Carte pour sélection manuelle */}
      <div>
        <p className="text-sm text-neutral-600 mb-2">
          {t('form.click_map', { defaultValue: 'Cliquez sur la carte pour sélectionner un emplacement' })}
        </p>
        <MapView
          center={value || { lat: 14.6928, lng: -17.4467 }}
          zoom={value ? 15 : 12}
          onMapClick={handleMapClick}
          selectedPosition={value}
          height="300px"
        />
      </div>

      {/* Affichage des coordonnées */}
      {value && (
        <div className="p-3 bg-neutral-50 border border-neutral-200 rounded-lg">
          <div className="flex items-start gap-2">
            <MapPin className="w-5 h-5 text-primary-600 flex-shrink-0 mt-0.5" />
            <div className="flex-1">
              <p className="text-sm font-medium text-neutral-900">
                {mode === 'gps'
                  ? t('form.gps_position', { defaultValue: 'Position GPS' })
                  : t('form.manual_position', { defaultValue: 'Position sélectionnée' })
                }
              </p>
              <p className="text-xs text-neutral-600 mt-1 font-mono">
                {value.lat.toFixed(6)}, {value.lng.toFixed(6)}
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Erreur de validation */}
      {error && (
        <p className="text-sm text-red-600">
          {error}
        </p>
      )}
    </div>
  );
}

export default LocationPicker;

