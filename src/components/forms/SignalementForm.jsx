// @generated by Cursor AI (Claude) ‚Äî verified by Kevin Mendy
import { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { Camera, X, Loader2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import LocationPicker from '@/components/maps/LocationPicker';
import SuccessModal from '@/components/shared/SuccessModal';
import useCommunes from '@/hooks/useCommunes';
import useImageUpload from '@/hooks/useImageUpload';
import * as reportService from '@/services/reportService';

/**
 * Types de signalements disponibles
 */
const REPORT_TYPES = [
  { value: 'voirie', label: 'Voirie (route, trottoir, nid de poule)' },
  { value: 'eclairage', label: '√âclairage public' },
  { value: 'proprete', label: 'Propret√© (d√©chets, ordures)' },
  { value: 'eau', label: 'Eau (fuite, coupure)' },
  { value: 'electricite', label: '√âlectricit√© (panne, coupure)' },
  { value: 'assainissement', label: 'Assainissement (√©gouts, drainage)' },
  { value: 'espaces_verts', label: 'Espaces verts (parcs, arbres)' },
  { value: 'securite', label: 'S√©curit√© publique' },
  { value: 'autre', label: 'Autre' },
];

/**
 * Composant SignalementForm - Formulaire complet de signalement
 * 
 * Fonctionnalit√©s :
 * - Tous les champs du signalement
 * - Upload d'image avec preview et compression
 * - S√©lection GPS/Manuel de la position
 * - Validation compl√®te
 * - Soumission avec √©tats loading/error/success
 * - Modal de succ√®s apr√®s soumission
 * 
 * Props : Aucune (formulaire standalone)
 * 
 * @example
 * <SignalementForm />
 */
function SignalementForm() {
  const { t } = useTranslation('common');
  const { communes, loading: communesLoading } = useCommunes();
  const {
    imageFile,
    imagePreview,
    isCompressing,
    error: imageError,
    selectImage,
    removeImage
  } = useImageUpload();

  // √âtat du formulaire
  const [formData, setFormData] = useState({
    type: '',
    description: '',
    position: null, // { lat, lng }
    commune_id: '',
    phone: '',
    citizen_name: ''
  });

  // √âtats UI
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitError, setSubmitError] = useState(null);
  const [showSuccess, setShowSuccess] = useState(false);
  const [createdReport, setCreatedReport] = useState(null);

  /**
   * G√©rer les changements de champs
   */
  const handleChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    // Effacer l'erreur du champ modifi√©
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: null }));
    }
  };

  /**
   * Valider le formulaire
   */
  const validateForm = () => {
    const newErrors = {};

    // Type obligatoire
    if (!formData.type) {
      newErrors.type = t('errors.type_required', { defaultValue: 'Le type est obligatoire' });
    }

    // Position obligatoire
    if (!formData.position) {
      newErrors.position = t('errors.position_required', {
        defaultValue: 'La position GPS est obligatoire'
      });
    }

    // Commune obligatoire (selon les specs du brief)
    if (!formData.commune_id) {
      newErrors.commune_id = t('errors.commune_required', {
        defaultValue: 'La commune est obligatoire'
      });
    }

    // T√©l√©phone obligatoire (selon les specs du brief)
    if (!formData.phone || formData.phone.trim() === '') {
      newErrors.phone = t('errors.phone_required', {
        defaultValue: 'Le num√©ro de t√©l√©phone est obligatoire'
      });
    }

    // Nom obligatoire (selon les specs du brief)
    if (!formData.citizen_name || formData.citizen_name.trim() === '') {
      newErrors.citizen_name = t('errors.name_required', {
        defaultValue: 'Le nom est obligatoire'
      });
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  /**
   * Soumettre le formulaire
   */
  const handleSubmit = async (e) => {
    e.preventDefault();

    // Validation
    if (!validateForm()) {
      console.log('‚ùå Validation √©chou√©e:', errors);
      return;
    }

    setIsSubmitting(true);
    setSubmitError(null);

    try {
      console.log('üì§ Soumission du signalement...');

      // Pr√©parer les donn√©es
      const submitData = {
        type: formData.type,
        description: formData.description || null,
        latitude: formData.position.lat,
        longitude: formData.position.lng,
        commune_id: formData.commune_id,
        phone: formData.phone,
        citizen_name: formData.citizen_name,
        imageFile: imageFile || null
      };

      // Soumettre via le service
      const result = await reportService.submitReport(submitData);

      if (result.validationErrors) {
        setErrors(result.validationErrors);
        console.error('‚ùå Erreurs de validation:', result.validationErrors);
        return;
      }

      if (result.error) {
        setSubmitError(result.error.message);
        console.error('‚ùå Erreur soumission:', result.error);
        return;
      }

      // Succ√®s !
      console.log('‚úÖ Signalement cr√©√©:', result.report.id);
      setCreatedReport(result.report);
      setShowSuccess(true);

      // R√©initialiser le formulaire
      resetForm();

    } catch (err) {
      console.error('‚ùå Erreur inattendue:', err);
      setSubmitError(t('errors.submit_failed', {
        defaultValue: 'Une erreur est survenue. Veuillez r√©essayer.'
      }));
    } finally {
      setIsSubmitting(false);
    }
  };

  /**
   * R√©initialiser le formulaire
   */
  const resetForm = () => {
    setFormData({
      type: '',
      description: '',
      position: null,
      commune_id: '',
      phone: '',
      citizen_name: ''
    });
    removeImage();
    setErrors({});
    setSubmitError(null);
  };

  return (
    <>
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Type de signalement */}
        <div>
          <Label htmlFor="type">
            {t('form.type', { defaultValue: 'Type de probl√®me' })}
            <span className="text-red-500 ml-1">*</span>
          </Label>
          <Select
            value={formData.type}
            onValueChange={(value) => handleChange('type', value)}
          >
            <SelectTrigger id="type" className="mt-2">
              <SelectValue placeholder={t('form.select_type', { defaultValue: 'S√©lectionnez un type' })} />
            </SelectTrigger>
            <SelectContent>
              {REPORT_TYPES.map((type) => (
                <SelectItem key={type.value} value={type.value}>
                  {type.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          {errors.type && (
            <p className="text-sm text-red-600 mt-1">{errors.type}</p>
          )}
        </div>

        {/* Description */}
        <div>
          <Label htmlFor="description">
            {t('form.description', { defaultValue: 'Description' })}
          </Label>
          <textarea
            id="description"
            value={formData.description}
            onChange={(e) => handleChange('description', e.target.value)}
            placeholder={t('form.description_placeholder', {
              defaultValue: 'D√©crivez le probl√®me en d√©tail...'
            })}
            className="mt-2 w-full min-h-[120px] px-3 py-2 border border-neutral-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
            maxLength={1000}
          />
          <p className="text-xs text-neutral-500 mt-1">
            {formData.description.length}/1000 {t('form.characters', { defaultValue: 'caract√®res' })}
          </p>
          {errors.description && (
            <p className="text-sm text-red-600 mt-1">{errors.description}</p>
          )}
        </div>

        {/* Photo */}
        <div>
          <Label htmlFor="photo">
            {t('form.photo', { defaultValue: 'Photo' })}
          </Label>
          <p className="text-sm text-neutral-600 mt-1 mb-3">
            {t('form.photo_desc', { defaultValue: 'Ajoutez une photo pour illustrer le probl√®me' })}
          </p>

          {!imagePreview ? (
            <label
              htmlFor="photo-input"
              className="block w-full p-6 border-2 border-dashed border-neutral-300 rounded-lg hover:border-primary-500 transition-colors cursor-pointer"
            >
              <div className="flex flex-col items-center gap-2">
                {isCompressing ? (
                  <>
                    <Loader2 className="w-10 h-10 text-primary-600 animate-spin" />
                    <p className="text-sm text-primary-600 font-medium">
                      {t('form.compressing', { defaultValue: 'Compression en cours...' })}
                    </p>
                  </>
                ) : (
                  <>
                    <Camera className="w-10 h-10 text-neutral-400" />
                    <p className="text-sm text-neutral-600">
                      {t('form.click_to_upload', { defaultValue: 'Cliquez pour ajouter une photo' })}
                    </p>
                    <p className="text-xs text-neutral-500">
                      JPEG, PNG, WebP (max 5MB)
                    </p>
                  </>
                )}
              </div>
              <input
                id="photo-input"
                type="file"
                accept="image/*"
                onChange={selectImage}
                className="hidden"
                disabled={isCompressing}
              />
            </label>
          ) : (
            <div className="relative">
              <img
                src={imagePreview}
                alt="Preview"
                className="w-full h-64 object-cover rounded-lg border-2 border-neutral-200"
              />
              <button
                type="button"
                onClick={removeImage}
                className="absolute top-2 right-2 p-2 bg-red-500 text-white rounded-full hover:bg-red-600 transition-colors"
              >
                <X className="w-4 h-4" />
              </button>
            </div>
          )}

          {imageError && (
            <p className="text-sm text-red-600 mt-2">{imageError.message}</p>
          )}
        </div>

        {/* Emplacement (GPS/Manuel) */}
        <LocationPicker
          value={formData.position}
          onChange={(pos) => handleChange('position', pos)}
          error={errors.position}
        />

        {/* Commune */}
        <div>
          <Label htmlFor="commune">
            {t('form.commune', { defaultValue: 'Commune' })}
            <span className="text-red-500 ml-1">*</span>
          </Label>
          <Select
            value={formData.commune_id}
            onValueChange={(value) => handleChange('commune_id', value)}
            disabled={communesLoading}
          >
            <SelectTrigger id="commune" className="mt-2">
              <SelectValue placeholder={
                communesLoading
                  ? t('form.loading_communes', { defaultValue: 'Chargement...' })
                  : t('form.select_commune', { defaultValue: 'S√©lectionnez votre commune' })
              } />
            </SelectTrigger>
            <SelectContent>
              {communes.map((commune) => (
                <SelectItem key={commune.id} value={commune.id}>
                  {commune.name} ({commune.region})
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          {errors.commune_id && (
            <p className="text-sm text-red-600 mt-1">{errors.commune_id}</p>
          )}
        </div>

        {/* T√©l√©phone */}
        <div>
          <Label htmlFor="phone">
            {t('form.phone', { defaultValue: 'Num√©ro de t√©l√©phone' })}
            <span className="text-red-500 ml-1">*</span>
          </Label>
          <Input
            id="phone"
            type="tel"
            value={formData.phone}
            onChange={(e) => handleChange('phone', e.target.value)}
            placeholder="+221 77 123 45 67"
            className="mt-2"
          />
          {errors.phone && (
            <p className="text-sm text-red-600 mt-1">{errors.phone}</p>
          )}
        </div>

        {/* Nom */}
        <div>
          <Label htmlFor="name">
            {t('form.name', { defaultValue: 'Votre nom' })}
            <span className="text-red-500 ml-1">*</span>
          </Label>
          <Input
            id="name"
            type="text"
            value={formData.citizen_name}
            onChange={(e) => handleChange('citizen_name', e.target.value)}
            placeholder={t('form.name_placeholder', { defaultValue: 'Amadou Diallo' })}
            className="mt-2"
          />
          {errors.citizen_name && (
            <p className="text-sm text-red-600 mt-1">{errors.citizen_name}</p>
          )}
        </div>

        {/* Erreur de soumission */}
        {submitError && (
          <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
            <p className="text-sm text-red-700">{submitError}</p>
          </div>
        )}

        {/* Bouton de soumission */}
        <Button
          type="submit"
          className="w-full"
          disabled={isSubmitting || isCompressing}
        >
          {isSubmitting ? (
            <>
              <Loader2 className="w-4 h-4 mr-2 animate-spin" />
              {t('form.submitting', { defaultValue: 'Envoi en cours...' })}
            </>
          ) : (
            t('form.submit', { defaultValue: 'Envoyer le signalement' })
          )}
        </Button>
      </form>

      {/* Modal de succ√®s */}
      <SuccessModal
        open={showSuccess}
        onClose={() => setShowSuccess(false)}
        report={createdReport}
      />
    </>
  );
}

export default SignalementForm;

