// @generated by Cursor AI (Claude) — verified by Kevin Mendy
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import { Suspense, lazy } from 'react';
import { Toaster } from 'sonner';
import { LangProvider } from '@/context/LangContext';
import { AuthProvider } from '@/context/AuthContext';
import { Loader2 } from 'lucide-react';

// Layouts (chargés immédiatement car nécessaires pour structure)
import PublicLayout from '@/layouts/PublicLayout';
import DashboardLayout from '@/layouts/DashboardLayout';
import AgentLayout from '@/layouts/AgentLayout';
import AdminLayout from '@/layouts/AdminLayout';

// Route Guards (chargés immédiatement car nécessaires pour sécurité)
import RequireAuth from '@/components/shared/RequireAuth';
import RequireRole from '@/components/shared/RequireRole';

// Pages (lazy loading pour améliorer performance)
const Login = lazy(() => import('@/pages/Login'));
const HomePage = lazy(() => import('@/pages/Citizen/HomePage'));
const CitizenMap = lazy(() => import('@/pages/Citizen/CitizenMap'));
const NewSignalement = lazy(() => import('@/pages/Citizen/NewSignalement'));
const Settings = lazy(() => import('@/pages/Citizen/Settings'));
const AgentDashboard = lazy(() => import('@/pages/Agent/AgentDashboard'));
const ReportList = lazy(() => import('@/pages/Agent/ReportList'));
const ReportDetail = lazy(() => import('@/pages/Agent/ReportDetail'));
const AdminDashboard = lazy(() => import('@/pages/Admin/AdminDashboard'));
const GlobalReports = lazy(() => import('@/pages/Admin/GlobalReports'));

/**
 * Composant de chargement affiché pendant le lazy loading
 */
function LoadingFallback() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-neutral-50">
      <div className="flex flex-col items-center space-y-4">
        <Loader2 className="h-12 w-12 animate-spin text-primary-600" />
        <p className="text-neutral-600 font-medium">Chargement...</p>
      </div>
    </div>
  );
}

/**
 * Composant principal de l'application WattU
 * 
 * Architecture :
 * - BrowserRouter : Gestion des routes
 * - LangProvider : Context global pour langue (FR/Wolof)
 * - AuthProvider : Context global pour authentification
 * - Suspense : Gestion du lazy loading des pages
 * - Routes publiques : Accessible sans auth (citoyens)
 * - Routes protégées : Nécessite auth + rôle (agents/admins)
 * 
 * Hiérarchie des Contexts :
 * BrowserRouter → LangProvider → AuthProvider → Suspense → Routes
 * 
 * Note : AuthProvider DOIT être à l'intérieur de BrowserRouter
 * car il utilise useNavigate() pour les redirections
 */
function App() {
  return (
    <BrowserRouter>
      {/* Toast notifications (Sonner) */}
      <Toaster 
        position="top-right" 
        richColors 
        closeButton 
        duration={4000}
        toastOptions={{
          style: {
            fontFamily: 'Inter, system-ui, sans-serif',
          },
        }}
      />
      
      {/* Context global pour la langue */}
      <LangProvider>
        {/* Context global pour l'authentification */}
        <AuthProvider>
          {/* Suspense pour gérer le chargement des pages lazy */}
          <Suspense fallback={<LoadingFallback />}>
            <Routes>
            {/* ═══════════════════════════════════════════════════════════
                ROUTES PUBLIQUES (Citoyens)
                ═══════════════════════════════════════════════════════════ */}
            
            {/* Layout public avec LanguageSwitcher + BottomNavigation */}
            <Route element={<PublicLayout />}>
              {/* Page d'accueil (Dashboard citoyen) */}
              <Route index element={<HomePage />} />
              <Route path="/" element={<HomePage />} />
              
              {/* Carte interactive des signalements */}
              <Route path="/carte" element={<CitizenMap />} />
              
              {/* Nouveau signalement */}
              <Route path="/signalements/nouveau" element={<NewSignalement />} />
              
              {/* Paramètres (langue FR/Wolof) */}
              <Route path="/parametres" element={<Settings />} />
            </Route>

            {/* ═══════════════════════════════════════════════════════════
                LOGIN (Route standalone, français forcé)
                ═══════════════════════════════════════════════════════════ */}
            
            <Route path="/login" element={<Login />} />

            {/* ═══════════════════════════════════════════════════════════
                ROUTES AGENT (Protégées + Role-based)
                ═══════════════════════════════════════════════════════════ */}
            
            <Route
              path="/agent/*"
              element={
                <RequireAuth>
                  <RequireRole allowedRoles={['agent']}>
                    <AgentLayout />
                  </RequireRole>
                </RequireAuth>
              }
            >
              {/* Dashboard agent */}
              <Route path="dashboard" element={<AgentDashboard />} />
              
              {/* Liste des signalements */}
              <Route path="reports" element={<ReportList />} />
              
              {/* Détail d'un signalement */}
              <Route path="reports/:id" element={<ReportDetail />} />
              
              {/* Redirection par défaut : /agent → /agent/dashboard */}
              <Route index element={<Navigate to="/agent/dashboard" replace />} />
            </Route>

            {/* ═══════════════════════════════════════════════════════════
                ROUTES ADMIN (Protégées + Role-based)
                ═══════════════════════════════════════════════════════════ */}
            
            <Route
              path="/admin/*"
              element={
                <RequireAuth>
                  <RequireRole allowedRoles={['admin']}>
                    <AdminLayout />
                  </RequireRole>
                </RequireAuth>
              }
            >
              {/* Dashboard admin */}
              <Route path="dashboard" element={<AdminDashboard />} />
              
              {/* Liste de TOUS les signalements */}
              <Route path="reports" element={<GlobalReports />} />
              
              {/* Détail d'un signalement (réutilise le même que Agent) */}
              <Route path="reports/:id" element={<ReportDetail />} />
              
              {/* Redirection par défaut : /admin → /admin/dashboard */}
              <Route index element={<Navigate to="/admin/dashboard" replace />} />
            </Route>

            {/* ═══════════════════════════════════════════════════════════
                ROUTE 404 - Page non trouvée
                ═══════════════════════════════════════════════════════════ */}
            
            <Route path="*" element={<NotFound />} />
          </Routes>
          </Suspense>
        </AuthProvider>
      </LangProvider>
    </BrowserRouter>
  );
}

/**
 * Composant 404 - Page non trouvée
 * 
 * Simple page d'erreur pour routes inexistantes
 */
function NotFound() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-neutral-50 px-4">
      <div className="text-center space-y-4">
        <h1 className="text-6xl font-bold text-neutral-900">404</h1>
        <p className="text-xl text-neutral-600">Page non trouvée</p>
        <a 
          href="/" 
          className="inline-block px-6 py-3 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors"
        >
          Retour à l'accueil
        </a>
      </div>
    </div>
  );
}

export default App;
