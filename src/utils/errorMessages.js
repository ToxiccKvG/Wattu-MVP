

/**
 * Centralisation des messages d'erreur
 * 
 * R√¥le : Transformer les erreurs techniques (Supabase, r√©seau, etc.)
 * en messages utilisateur s√©curis√©s et compr√©hensibles
 * 
 * S√©curit√© : Ne JAMAIS exposer les d√©tails techniques aux utilisateurs
 * (√©vite les fuites d'infos qui pourraient aider au hacking)
 */

/**
 * Mapping des erreurs d'authentification Supabase
 * Structure : { "Erreur Supabase": { fr: "Message FR", wo: "Message Wolof" } }
 */
export const authErrorMessages = {
  // Erreur de credentials invalides
  'Invalid login credentials': {
    fr: 'Email ou mot de passe incorrect',
    wo: 'Email walla mot de passe da√±u xamul',
  },
  
  // User introuvable (on donne le M√äME message que credentials invalides pour la s√©curit√©)
  'User not found': {
    fr: 'Email ou mot de passe incorrect',
    wo: 'Email walla mot de passe da√±u xamul',
  },
  
  // Email non confirm√©
  'Email not confirmed': {
    fr: 'Veuillez confirmer votre email avant de vous connecter',
    wo: 'Dafay wara confirmer sa email balaa dugge',
  },
  
  // Session expir√©e (JWT invalide)
  'Invalid JWT': {
    fr: 'Votre session a expir√©. Veuillez vous reconnecter',
    wo: 'Sa session a expir√©. Dafay wara dugg bu bees',
  },
  
  'JWT expired': {
    fr: 'Votre session a expir√©. Veuillez vous reconnecter',
    wo: 'Sa session a expir√©. Dafay wara dugg bu bees',
  },
  
  // Trop de tentatives de connexion
  'Too many requests': {
    fr: 'Trop de tentatives. Veuillez r√©essayer dans quelques minutes',
    wo: 'Y√†gg na lool. J√©ematul ci ay simili',
  },
  
  // Erreur r√©seau
  'Network request failed': {
    fr: 'Erreur de connexion. V√©rifiez votre connexion internet',
    wo: 'Erreur connexion. Xoolal sa internet',
  },
  
  'Failed to fetch': {
    fr: 'Erreur de connexion. V√©rifiez votre connexion internet',
    wo: 'Erreur connexion. Xoolal sa internet',
  },
};

/**
 * Messages d'erreur g√©n√©riques (fallback si erreur inconnue)
 */
export const genericErrorMessages = {
  fr: 'Une erreur est survenue. Veuillez r√©essayer',
  wo: 'Am na ci njumte. J√©ematul',
};

/**
 * Fonction pour obtenir un message d'erreur s√©curis√©
 * 
 * @param {Error|string} error - Erreur Supabase ou message d'erreur
 * @param {string} language - Langue ('fr' | 'wo')
 * @returns {string} Message d'erreur s√©curis√© dans la langue demand√©e
 * 
 * Comportement :
 * 1. Cherche dans authErrorMessages si message connu
 * 2. Sinon, retourne message g√©n√©rique (ultra s√©curis√©)
 * 3. Log l'erreur technique en console (pour debug d√©veloppeur)
 */
export function getSecureErrorMessage(error, language = 'fr') {
  // Extraire le message de l'erreur
  const errorMessage = typeof error === 'string' ? error : error?.message || '';
  
  // Log technique (visible uniquement en d√©veloppement)
  if (process.env.NODE_ENV === 'development') {
    console.error('üî¥ Erreur technique (ne pas afficher √† l\'user):', error);
  }
  
  // Chercher dans le mapping
  if (authErrorMessages[errorMessage]) {
    return authErrorMessages[errorMessage][language] || authErrorMessages[errorMessage].fr;
  }
  
  // Si erreur inconnue, retourner message g√©n√©rique
  return genericErrorMessages[language] || genericErrorMessages.fr;
}

/**
 * Fonction pour obtenir un message d'erreur de validation
 * (utilis√© pour validation de formulaires c√¥t√© client)
 */
export const validationErrorMessages = {
  emailRequired: {
    fr: 'L\'email est obligatoire',
    wo: 'Email a obligatoire',
  },
  
  emailInvalid: {
    fr: 'L\'email n\'est pas valide',
    wo: 'Email bi xamu√±u ko',
  },
  
  passwordRequired: {
    fr: 'Le mot de passe est obligatoire',
    wo: 'Mot de passe a obligatoire',
  },
  
  passwordTooShort: {
    fr: 'Le mot de passe doit contenir au moins 6 caract√®res',
    wo: 'Mot de passe bi dafay wara am 6 caract√®res',
  },
};

/**
 * Fonction helper pour obtenir un message de validation
 * 
 * @param {string} key - Cl√© du message (ex: 'emailRequired')
 * @param {string} language - Langue ('fr' | 'wo')
 * @returns {string} Message de validation
 */
export function getValidationMessage(key, language = 'fr') {
  if (validationErrorMessages[key]) {
    return validationErrorMessages[key][language] || validationErrorMessages[key].fr;
  }
  return genericErrorMessages[language];
}

export default {
  authErrorMessages,
  genericErrorMessages,
  validationErrorMessages,
  getSecureErrorMessage,
  getValidationMessage,
};

